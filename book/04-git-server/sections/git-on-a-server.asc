[[_git_on_the_server]]
=== 在服务器上部署 Git

现在我们来讲讲怎么在你自己的服务器上部署Git服务运行在之前谈到的协议之上。

[NOTE]
====
接下来我们会演示一些命令和步骤。这些命令和步骤可以在 Linux 服务器上完成一个基本的简化的安装。当然这些服务也可以运行在 Mac 或 Windows 服务器上。
事实上，在你的 IT 基础架构上搭建一个生产服务器肯定会存在一些安全措施或系统工具的不一样。但是希望本节可以给你一个笼统的概念，了解会涉及些什么。
====

为了开始搭建任何的 Git 服务器，需要导出一个已有的仓库为一个新的裸仓库——一个不包含工作目录的仓库。
步骤大体上是简单明了的。
克隆你的仓库来创建一个裸仓库，你可以运行加上 `--bare` 选项的克隆命令。(((git commands, clone, bare)))
按照惯例, 裸仓库的文件目录名以 `.git` 结束，如下：

[source,console]
----
$ git clone --bare my_project my_project.git
Cloning into bare repository 'my_project.git'...
done.
----

现在 `my_project.git` 目录中已经有了一份 Git 目录中数据的副本。

上面的命令大致相当于下面的命令：

[source,console]
----
$ cp -Rf my_project/.git my_project.git
----

但在配置文件中有若干小改动，不过对用户来讲，效果都差不多。
它会把 Git 仓库单独拿出来，不包括工作目录，之后再为它创建一个单独的目录存放。

[[_bare_repo]]
==== 把裸仓库移到服务器上

既然已经有了该仓库的裸副本，你所需要做的就是把它放在服务器上，再配置好协议。
假设说，你已经搭建好了一台叫 `git.example.com` 的服务器，而且也可以 SSH 连接上去，现在想将所有的 Git 仓库存放在 `/opt/git` 目录下。
如果说 `/opt/git` 已经在那台服务器上了，你可以通过直接复制裸仓库来建立你的新仓库：

[source,console]
----
$ scp -r my_project.git user@git.example.com:/opt/git
----

到这一阶段，其它可以通过 SSH 访问的用户如果也同时对 `/opt/git` 有读取权限的话，那么可以用下面的命令克隆你的仓库：

[source,console]
----
$ git clone user@git.example.com:/opt/git/my_project.git
----

如果一个用户 SSH 登录到那台服务器，而且同时具有对 `/opt/git/my_project.git` 写入的权限，他自然也就有了推送的权限。

如果你运行 `git init` 时加上 `--shared` 选项，Git 会自动正确地添加用户组的写入权限到该仓库。(((git commands, init, bare)))

[source,console]
----
$ ssh user@git.example.com
$ cd /opt/git/my_project.git
$ git init --bare --shared
----

我们已经看到这是多么简单，只需要取出 Git 仓库，用它创建一个裸仓库，再把这个裸仓库放到你和你的合作者们有 SSH 权限的服务器上。
现在你可以开始在这项目上合作了。

要着重说明一下，下面就是为了运行一个可供若干人使用的 Git 服务器所需要的全部工作——在服务器上添加 SSH 账号，把一个裸仓库放在一个所有合作者有读写权限的地方。
搞定——别的什么都不需要了。

在接下来的几节当中，你会了解到怎么样去扩展至更精细的配置。
这些讨论会包括如何避免为用户逐一建立账号，开放仓库的读取权限，配置网页交互界面，使用 Gitosis 工具等等。
然而请记住，如果是与几个人去协作一个私有项目，你所 _需要_ 的仅仅是一个 SSH 服务器和一个裸仓库。

==== 小型配置

如果是一个小型机构或者只是在你的组织里尝试 Git，开发人员也不是很多，那么事情对你来说可以变得简单。
配置一个 Git 服务器最复杂的方面之一是用户管理。
如果你想实现一个仓库对特定用户只读，而对别的用户可以读写，那么设置访问方式和权限可能会有点麻烦。

===== SSH 访问

(((serving repositories, SSH)))
如果已经有一个服务器，而且所有开发人员都对它有 SSH 访问权限，那么通常来说把你的第一个仓库放置在那里是最简单的。因为你几乎不用做什么 （就像我们上一节谈到的一样）。
如果想对仓库实施更复杂的访问控制类型权限，你可以通过服务器运行的操作系统的正常文件系统权限控制来处理。

如果你想把仓库放到一个服务器上，而你的团队并不是所有人都对它有写入权限，那么你需要为没有权限的添加 SSH 权限。
我们假设你有一个服务器来做这件事，你也已经安装了 SSH 服务，而且 SSH 就是你访问服务器的方式。

有下面几种方法来实现给你团队所有成员分配权限。
第一种就是为所有成员逐一设置账号，虽然操作很简单但是很繁重。
你可不想为每位用户都运行一遍 `adduser` 命令再设置临时密码。

第二种方式就是在服务器上创建一个 'git' 用户，再要求每一个需要写入权限的用户将他的 SSH 公钥发送给你，你再将公钥添加到新创建的 'git' 用户的 `~/.ssh/authorized_keys` 文件。
到这一步，所有人都可以通过 'git' 用户访问那台服务器了。
但这完全不影响提交数据——你连接的 SSH 用户不影响你的提交记录。

另外一种方式是让你的 SSH 服务器通过你已经部署好了的 LDAP 服务器或其它集中式的验证来源来验证。
只要每个用户都能得到服务器上 shell 的访问权限，任何你能想到的认证机制都应该能用。
