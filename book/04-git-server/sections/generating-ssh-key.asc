[[_generate_ssh_key]]
=== 生成你的 SSH 公钥

(((SSH keys)))
如前所述，许多 Git 服务器使用 SSH 密钥的验证方式。
为提供密钥验证，你服务器上的每一个用户需要生成一个自己的密钥，如果他们还没有的话。
这个过程在所有操作系统上都差不多类似。
首先你要检查系统，确保你还没有一个密钥。
默认的情况下，一个用户的 SSH 密钥对应该存储在该用户的 `~/.ssh` 目录。
你可以非常容易地查看是不是已经有一个密钥对，只需进入该目录，然后列出所有文件：

[source,console]
----
$ cd ~/.ssh
$ ls
authorized_keys2  id_dsa       known_hosts
config            id_dsa.pub
----

注意看这个目录中是不是有一对文件的文件名类似于 `id_dsa` 或 `id_rsa` 以及另一个相应的 `.pub` 后缀文件。
`.pub` 文件是该用户的公钥，另外一个不带后缀的文件是对应的私钥。
如果没有这些文件（甚至干脆连 `.ssh` 目录都没有），可以通过运行 `ssh-keygen` 来生成它们。这个工具在 Linux/Mac 系统上是随 SSH 包一起提供的，Windows 系统上则是随着 MSysGit 包提供。

[source,console]
----
$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/schacon/.ssh/id_rsa):
Created directory '/home/schacon/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/schacon/.ssh/id_rsa.
Your public key has been saved in /home/schacon/.ssh/id_rsa.pub.
The key fingerprint is:
d0:82:24:8e:d7:f1:bb:9b:33:53:96:93:49:da:9b:e3 schacon@mylaptop.local
----

最开始它会跟你确认保存密钥的位置（`.ssh/id_rsa`），之后需要输入两次密码。如果不想在之后使用密钥的时候输入密码，你也可以在这留空。

现在，每一个完成这个操作的用户需要把他的公钥发送给你或者 Git 服务器的管理员（假设你使用的 SSH 服务器要求公钥）。
他们只需将 `.pub` 文件里的内容复制到邮件中发送。
公钥的形式应该如下：

[source,console]
----
$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
NrRFi9wrf+M7Q== schacon@mylaptop.local
----

关于怎么在更多操作系统上生成 SSH 密钥的详细教程，请参见 GitHub 指南中 SSH 密钥的介绍：https://help.github.com/articles/generating-ssh-keys[] 。
