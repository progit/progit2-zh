[[_setting_up_server]]
=== 架设服务器

让我们练习一下在服务器端设置 SSH 访问。
这个示例将会用到 `authorized_keys` 方式来验证用户身份。
我们此处假设所使用得是标准 Linux 发行版，比如 Ubuntu。
最开始需要创建一个 'git' 用户以及该用户的 `.ssh` 目录。

[source,console]
----
$ sudo adduser git
$ su git
$ cd
$ mkdir .ssh && chmod 700 .ssh
$ touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys
----

接下来，你需要添加开发人员的 SSH 公钥到 `git` 用户的 `authorized_keys` 文件。
我们假设你有一些可信的公钥保存在临时文件中。
重复一遍，这些公钥应该看起来如下：

[source,console]
----
$ cat /tmp/id_rsa.john.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L
ojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k
Yjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez
Sdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv
O7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq
dAv8JggJICUvax2T9va5 gsg-keypair
----

你之需要将它们追加到 `git` 用户的 `.ssh`目录中的 `authorized_keys` 文件。

[source,console]
----
$ cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys
$ cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys
----

现在你可以为 John, Josie, Jessica 建立空仓库。只需运行 `git init` 附加 `--bare` 选项，它就将初始化仓库而不生成工作目录。(((git commands, init, bare)))

[source,console]
----
$ cd /opt/git
$ mkdir project.git
$ cd project.git
$ git init --bare
Initialized empty Git repository in /opt/git/project.git/
----

之后用户就可以通过添加它为远程仓库来推送他们项目的初始版本到这个仓库。
每次想添加一个新的项目的时候，必须 SSH 登录服务器并创建一个裸仓库。
这里我们使用 `gitserver` 作为服务器主机名。在它之上我们来添加 'git' 用户和仓库。
如果你只是在内部运行，而且 DNS 中的 `gitserver` 记录指向该服务器，那么你可以使用下面的命令（假设 `myproject` 这个项目已经存在并且包含有文件）：

[source,console]
----
# 在 John 的电脑上
$ cd myproject
$ git init
$ git add .
$ git commit -m 'initial commit'
$ git remote add origin git@gitserver:/opt/git/project.git
$ git push origin master
----

到这一步，其它用户也可以将它克隆下来并推送更新回去，就像下面一样简单：

[source,console]
----
$ git clone git@gitserver:/opt/git/project.git
$ cd project
$ vim README
$ git commit -am 'fix for the README file'
$ git push origin master
----

这种方式可以很快速地为若干开发人员搭建起一个可读写的 Git 服务器。

特别需要注意的是，所有这些用户都可以 SSH 登录到服务器上并获得 shell 权限。如果需要限制这种访问，请修改 `passwd` 文件中 `git` 用户的 shell。

有了 Git 自带的 `git-shell` 工具（限制版 shell），你可以轻松地限制 'git' 用户只能做 Git 操作。
如果将 `git-shell` 设置为 'git' 用户的登录 shell，那么 'git' 用户就不能在服务器上进行常规的 shell 操作。
使用 `git-shell` 替换 bash 或 csh 成为该用户的登录 shell。
不过首先要确保 `git-shell` 已经被添加到 `/etc/shells` 文件中。

[source,console]
----
$ cat /etc/shells   # 检查 `git-shell` 是否已经存在，如果不存在......
$ which git-shell   # 检查 `git-shell` 是否已经安装
$ sudo vim /etc/shells  # 添加上一步获取的 `git-shell` 路径
----

现在你就可以通过 `chsh <username>` 命令来修改用户的登录 shell 了。

[source,console]
----
$ sudo chsh git  # 之后输入 git-shell 的路径，通常为：/usr/bin/git-shell
----

现在，'git' 用户将仅能使用 SSH 推送和拉取 Git 仓库，而不能 SSH 登录到该服务器。
如果尝试 SSH 登录，则会出现下面的拒绝登录信息：

[source,console]
----
$ ssh git@gitserver
fatal: Interactive git shell is not enabled.
hint: ~/git-shell-commands should exist and have read and execute access.
Connection to gitserver closed.
----

现在 Git 命令还是正常运行，只不过用户已经不能获得 shell 权限了。
正如上面输出所示，你还可以在 ``git'' 用户的家目录中新建一个目录来稍微定制 `git-shell`。
举个例子，你可以限制服务器可以执行的 Git 命令或者也可以定制上面出现的提示信息。
运行 `git help shell` 来获取定制 git-shell 的更多信息。(((git commands, help)))
