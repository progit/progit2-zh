=== Git 守护进程

(((serving repositories, git protocol)))
接下来我们要配置一个守护进程来提供基于 ``Git'' 协议的仓库服务。这是快速、非授权地访问 Git 数据的普遍方式。记住，因为它无需授权，所以你以这种协议提供的所有数据都公开暴露在它所处的网络中。

如果提供此项服务的服务器在防火墙之外，它应该只用于一些全世界范围公开的项目。
如果提供此项服务的服务器在防火墙之内，它可以用于一些被数量众多的用户或计算机（持续集成或构建服务器）只读访问的项目，这样就无需为用户逐一添加 SSH 公钥。

在任何情况下，Git 协议都是相对比较容易配置的。
基本上，只要以守护进程的形式运行该命令即可：(((git commands, daemon)))

[source,console]
----
git daemon --reuseaddr --base-path=/opt/git/ /opt/git/
----

这里的 `--reuseadd` 选项表示在重启服务前，不等之前的连接超时就立即重启。而 `--base-path` 选项则允许克隆项目时不必给出完整路径。最后面的路径告诉 Git 守护进程允许开放给用户访问的仓库目录。
假如有防火墙，则需要为该主机的 9418 端口设置为允许通信。

以守护进程的形式运行该进程的方法有许多，具体方法取决操作系统。
在 Ubuntu 主机上，可以使用 Upstart 脚本完成。
因而，在下列文件中：

[source,console]
----
/etc/event.d/local-git-daemon
----

加入下列内容：

[source,console]
----
start on startup
stop on shutdown
exec /usr/bin/git daemon \
    --user=git --group=git \
    --reuseaddr \
    --base-path=/opt/git/ \
    /opt/git/
respawn
----

出于安全考虑，强烈建议使用一个对仓库仅有只读权限的用户来运行该守护进程——只需新建一个 'git-ro' 用户，并用它的身份来启动进程。
这里为了简化，我们还是直接使用之前 Gitosis 运行的用户 'git'。

当服务器重启，Git 守护进程会自动启动；万一进程意外退出，它也会自动重启。
设置完成之后，可以通过运行下列命令来启动守护进程，无需重启：

[source,console]
----
initctl start local-git-daemon
----

在其它操作系统上，可以使用 `xinetd` , 或一个 `sysvinit` 系统中的脚本，或其它别的什么——只要能让那个进程以守护进程运行并可监控。

接下来，我们要告诉 Git 哪些仓库是可以允许通过 Git 协议进行无需授权地访问。只需在每一个仓库中逐一创建 `git-daemon-export-ok` 文件。

[source,console]
----
$ cd /path/to/project.git
$ touch git-daemon-export-ok
----

该文件的存在告诉 Git 可以提供对该项目的访问，而无需授权。
