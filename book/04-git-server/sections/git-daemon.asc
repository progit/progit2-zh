=== Git 守护进程

(((serving repositories, git protocol)))
接下来我们将通过 ``Git'' 协议建立一个基于守护进程的仓库。对于快速且非授权的 Git 数据访问，这是一个通常的选择。请注意，因为这不是一个授权服务，任何通过该协议服务的内容将在其网络上开放。

如果你在你的防火墙外的一台服务器上运行它， 它将只被允许用于可被任何人获取的项目上。
如果运行该进程的服务器位于你的防火墙之内，你可以在多人或多计算机（持续集成或者构建服务器）拥有只读权限的项目上使用它，当你不想为每个人添加一个 SSH 密钥时。

在任何情况下，该 Git 协议是相对容易建立的。
通常你需要以守护进程的方式运行该命令:(((git commands, daemon)))

[source,console]
----
git daemon --reuseaddr --base-path=/opt/git/ /opt/git/
----

`--reuseaddr` 允许服务器在无需等待旧连接超时的情况下重启, `--base-path` 选项允许用户在未完全指定路径的条件下克隆项目, 结尾的路径将告诉 Git 守护进程从何处寻找仓库并且导出。
如果你正在运行一个防火墙，你将需要在其之上开放端口 9418 的通信权限。

你可以通过一系列方式守护化该进程，这取决于你所运行的操作系统。
在一台 Ubuntu 机器上, 你可以使用一份 Upstart 脚本。
因此，在以下文件中

[source,console]
----
/etc/event.d/local-git-daemon
----

你需要添加下列脚本:

[source,console]
----
start on startup
stop on shutdown
exec /usr/bin/git daemon \
    --user=git --group=git \
    --reuseaddr \
    --base-path=/opt/git/ \
    /opt/git/
respawn
----

出于安全考虑，我们强烈建议你使用一个对仓库拥有只读权限的用户来运行该守护进程 - 你可以创建一个新用户 'git-ro' 并且以该用户来运行守护进程来轻松实现。
为简便起见，我们将像 Gitosis 一样，以相同的 'git' 用户来运行它。

当你重启你的机器时，你的 Git 守护进程将会自动启动并且恢复关闭前的状态。
为了在不重启的情况下运行它，你可以运行以下命令：

[source,console]
----
initctl start local-git-daemon
----

在其他系统中，你可以使用 `xinetd` ，或 `sysvinit` 系统之上的脚本，或者另外的方式实现 - 只要您能够将其命令守护进程化并以某种方式实现监控。

接下来，你需要告诉 Git 哪些项目允许基于 Git 的服务在未经授权的情况下进行访问。你可以通过在每个仓库下创建一个名为 `git-daemon-export-ok` 的文件来实现它。

[source,console]
----
$ cd /path/to/project.git
$ touch git-daemon-export-ok
----

该文件的存在将使 Git 允许该项目在无授权的状态下运行。
