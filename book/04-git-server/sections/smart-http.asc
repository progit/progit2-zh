=== 智能 HTTP

(((serving repositories, HTTP)))
我们现在有需要授权的 SSH 访问方式和无需授权的 `git://` 访问方式，然而还有一种协议可以同时接受这两种方式。
配置智能 HTTP 基本上只是在服务器上启用一个 Git 提供的 CGI 脚本，它的文件名为 `git-http-backend`。((git commands, "http-backend"))
这个 CGI 会读取 `git fetch` 或 `git push` 发送到特定 HTTP URL 的路径和报文头，然后判断客户端是否支持通过 HTTP 通讯（1.6.6后的版本都应该支持）。
如果 CGI 发觉客户端支持智能 HTTP，它会智能地跟客户端通讯，否则它会回落到傻瓜模式（可见它是向后兼容的）。

让我们一步一步地来看一个非常简单的配置。我们会用 Apache 搭建 CGI 服务器。如果 Apache 还没有配置好，在 Linux 主机上可以使用类似于下列的命令：(((Apache)))

[source,console]
----
$ sudo apt-get install apache2 apache2-utils
$ a2enmod cgi alias env
----

上面的命令同时也启用了 `mod_cgi`, `mod_alias`, 以及 `mod_env` 模块，这些都是接下来会用到的。

接下来我们需要修改 Apache 的配置，将对该 web 服务器上 `/git` 路径的所有访问的 handler 配置为 `git http-backend`。

[source,console]
----
SetEnv GIT_PROJECT_ROOT /opt/git
SetEnv GIT_HTTP_EXPORT_ALL
ScriptAlias /git/ /usr/libexec/git-core/git-http-backend/
----

如果省略 `GIT_HTTP_EXPORT_ALL` 不写，那么 Git 将向未经授权的客户端仅提供带有 `git-daemon-export-ok` 文件的仓库，正如 Git 守护进程的做法一样。

然后需要配置 Apache 允许到该路径的访问请求：

[source,console]
----
<Directory "/usr/lib/git-core*">
   Options ExecCGI Indexes
   Order allow,deny
   Allow from all
   Require all granted
</Directory>
----

最后是配置某种写入授权，或许可以采用如下的 Auth 块：

[source,console]
----
<LocationMatch "^/git/.*/git-receive-pack$">
    AuthType Basic
    AuthName "Git Access"
    AuthUserFile /opt/git/.htpasswd
    Require valid-user
</LocationMatch>
----

上面代码需要一个 `.htaccess` ，它将包括所有有效用户的密码。下面是一个添加 ``schacon'' 用户到该文件的示例：

[source,console]
----
$ htdigest -c /opt/git/.htpasswd "Git Access" schacon
----

Apache 验证用户的方法有成千上万种，请从中选择一种并实施。以上的代码示例仅是我们能想到的最简单的例子。同时你也非常可能会想要配置好 SSL，这样所有的数据传输就是加密的。

本书并不打算更深入地掉到 Apache 配置文件的巨坑当中，因为你很可能会使用不同的服务器或者有不一样的用户验证需求。总的思路是 Git 自带一个叫 `git http-backend` 的 CGI，当其被调用时它会协调通过 HTTP 的数据传输。它本身并没有实现任何的用户身份验证，但是用户身份验证可以在调用它的 Web 服务器层面进行轻松地控制。几乎所有支持 CGI 的 Web 服务器上都可以使用这个 CGI，所以请尽情选用你最顺手的那个 Web 服务器。

[NOTE]
====
关于配置 Apache 身份验证的更多信息，请参见 Apache 文档：http://httpd.apache.org/docs/current/howto/auth.html[]
====
