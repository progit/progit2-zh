[[_git_aliases]]
=== Git 别名

(((aliases)))
在我们结束本章 Git 基础之前，仅仅有一个小技巧可以使你的 Git 体验更简单、容易、更熟悉：别名。
我们不会引用到它们或在之后的章节中假定你使用过它们，但是你大概应知道如何使用它们。

Git 并不会在你输入部分命令时自动推断你的命令。
如果你不想每次都输入每一个 Git 命令的完整文本，你可以通过 `git config` 文件来轻松地为每一个命令设置一个别名。(((git commands, config)))
这里是一个你可能想设置的例子：

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

这意味着，例如，当要输入 `git commit`，你只需要输入 `git ci`。
随着你进一步地使用 Git，你可能还会需要经常使用其他命令；不要犹豫创建别名。

这个技术在创建你认为应该存在的命令时会很有用。
例如，当你遇到取消暂存文件时需要去改正可用性的问题，你可以向 Git 中添加你自己的取消暂存别名：

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

这会使下面的两个命令等价：

[source,console]
----
$ git unstage fileA
$ git reset HEAD fileA
----

这看起来更清楚一些。
通常也会加一个 `last` 命令，像这样：

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

这样，你可以轻易地看到最后一次提交：

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

就像你所说的，Git 只是简单地将你定义的别名替换为对应的新的命令。
然而，你可能想要执行外部命令，而不是一个 Git 子命令。
这种情况下，你可以在命令前面加入 `!` 符号。
当你在写你自己的与 Git 仓库协作的工具时会很有用。
我们下面的演示是将 `git visual` 定义为 `gitk` 的别名：

[source,console]
----
$ git config --global alias.visual "!gitk"
----
