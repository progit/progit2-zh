[[_undoing]]
=== 撤消

在任何一个阶段，你都有可能想要撤消。
这里，我们将会回顾你所做修改的几个基本工具。
小心，因为你不能一直撤消一些撤消。
这是 Git 中因为你做错了而导致丢失工作的一个区域。

一个普通的撤消可能会在你提交时遗漏了文件，或者你把提交信息搞乱了的时候发生。
如果你想要再次提交，你可以在提交时使用 `--amend` 选项：

[source,console]
----
$ git commit --amend
----

这个命令会将暂存区中的文件用作提交。
如果自上次提交以来你还未做任何修改（例如，在你上次提交后马上执行了此命令），那么你的快照会保持不变，而所有你修改的只是你的提交信息。

同样提交信息的编辑器打开，但是其中包含了你前一次的提交信息。
你可以像往常一样编辑信息，但是它会覆盖你之前的提交。

例如，如果你在提交后发觉你忘记添加一个文件到这次提交中，你可以像下面一样做：

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

你最终会只有一个提交 - 第二次提交将代替第一次提交的结果。

[[_unstaging]]
==== 取消暂存的文件

接下来的两个部分演示如何操纵你的暂存区域与工作目录中的修改。
最好的是，你使用的命令来修改两个区域状态的同时，也会提示你如何撤消修改。
例如，让我们假设你已经修改了两个文件并且想要提交它们作为两次独立的修改，但是你不小心输入了 `git add *` 然后暂存了它们两个。
你如何只撤消暂存两个中的一个呢？
`git status` 命令提醒了你：

[source,console]
----
$ git add .
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

在 ``Changes to be committed'' 文字正下方，它说使用 `git reset HEAD <file>...` 来取消暂存。
所以，让我们使用那个建议来取消暂存 `CONTRIBUTING.md` 文件：

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

这个命令有点奇怪，但是起作用了。
这个 `CONTRIBUTING.md` 文件是修改了但并没有再次暂存。

[NOTE]
=====
如果你使用 `--hard` 选项则 `git reset` 命令 _can_ 会是一个危险的命令，这种情况下你的工作目录中的文件并不会动。调用 `git reset` 时不加任何参数则不危险 - 它只会修改你的暂存区域。
=====

到现在为止就是所有你需要对 `git reset` 命令了解的全部。我们将会在 <<_git_reset>> 了解 `reset` 做了什么事与掌握它做一些有趣的事。

==== 撤消修改文件

假如你意识到你并不想保留你对 `CONTRIBUTING.md` 文件的修改？
你如何容易地撤消修改 - 将它恢复成你上次修改时的样子（或刚克隆完的，或者无论你怎样在工作目录得到它的）？
幸运地，`git status` 也告诉了你如何去做。
在最后一个例子的输出中，未暂存区域看起来是下面这样：

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

它相当清楚地告诉你如何放弃你之前所做的修改。
让我们来按照它说的做：

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

你可以看到那些修改已经被撤消了。

[IMPORTANT]
=====
了解 `git checkout -- [file]` 是一个危险的命令是很重要的。你对那个文件做得任意修改都会消失 - 你只是拷贝了另一个文件来覆盖它。
除非你明确地知道你不想要那个文件了，否则不要使用这个命令。
=====

如果你仍然想保留你已经做出的修改，但是只是想现在撤消一下，我们将会在 <<_git_branching>> 介绍暂存与分支；这些通常是更好的做法。

记住，在 Git 中任何东西是 __committed__ 几乎总是可以恢复的。
甚至那些删除分支中的提交或使用 `--amend` 选项覆盖的提交也可以恢复（阅读 <<_data_recovery>> 了解数据恢复）。
然而，任何你未提交的东西丢失后很可能再也看不到了。
