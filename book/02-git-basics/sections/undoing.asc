[[_undoing]]
=== 撤消操作

在任何一个阶段，你都有可能想要撤消某些操作。
这里，我们将会学习几个撤消你所做修改的基本工具。
注意，有些撤消操作是不可逆的。
这是在使用 Git 的过程中，会因为操作失误而导致之前的工作丢失的少有的几个地方之一。

有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。
此时，可以运行带有 `--amend` 选项的提交命令来重新提交：

[source,console]
----
$ git commit --amend
----

这个命令会将暂存区中的文件提交。
如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了此命令），
那么快照会保持不变，而你所修改的只是提交信息。

文本编辑器启动后，可以看到之前的提交信息。
编辑后保存会覆盖原来的提交信息。

例如，你提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

最终你只会有一个提交——第二次提交将代替第一次提交的结果。

[NOTE]
====
当你在修补最后的提交时，与其说是修复旧提交，倒不如说是完全用一个 *新的提交* 替换旧的提交，
理解这一点非常重要。从效果上来说，就像是旧有的提交从未存在过一样，它并不会出现在仓库的历史中。

修补提交最明显的价值是可以稍微改进你最后的提交，而不会让“啊，忘了添加一个文件”或者
“小修补，修正笔误”这种提交信息弄乱你的仓库历史。
====

[[_unstaging]]
==== 取消暂存的文件

接下来的两个小节演示如何操作暂存区和工作目录中已修改的文件。
这些命令在修改文件状态的同时，也会提示如何撤消操作。
例如，你已经修改了两个文件并且想要将它们作为两次独立的修改提交，
但是却意外地输入 `git add *` 暂存了它们两个。如何只取消暂存两个中的一个呢？
`git status` 命令提示了你：

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----

在 “Changes to be committed” 文字正下方，提示使用 `git reset HEAD <file>...` 来取消暂存。
所以，我们可以这样来取消暂存 `CONTRIBUTING.md` 文件：

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

这个命令有点儿奇怪，但是起作用了。
`CONTRIBUTING.md` 文件已经是修改未暂存的状态了。

[NOTE]
=====
`git reset` 确实是个危险的命令，如果加上了 `--hard` 选项则更是如此。
然而在上述场景中，工作目录中的文件尚未修改，因此相对安全一些。
=====

到目前为止这个神奇的调用就是你需要对 `git reset` 命令了解的全部。
我们将会在 <<ch07-git-tools#_git_reset>> 中了解 `reset` 的更多细节以及如何掌握它做一些真正有趣的事。

==== 撤消对文件的修改

如果你并不想保留对 `CONTRIBUTING.md` 文件的修改怎么办？
你该如何方便地撤消修改——将它还原成上次提交时的样子（或者刚克隆完的样子，或者刚把它放入工作目录时的样子）？
幸运的是，`git status` 也告诉了你应该如何做。
在最后一个例子中，未暂存区域是这样：

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

它非常清楚地告诉了你如何撤消之前所做的修改。
让我们来按照提示执行：

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

可以看到那些修改已经被撤消了。

[IMPORTANT]
=====
请务必记得 `git checkout -- <file>` 是一个危险的命令。
你对那个文件在本地的任何修改都会消失——Git 会用最近提交的版本覆盖掉它。
除非你确实清楚不想要对那个文件的本地修改了，否则请不要使用这个命令。
=====

如果你仍然想保留对那个文件做出的修改，但是现在仍然需要撤消，我们将会在
<<ch03-git-branching#ch03-git-branching>> 介绍保存进度与分支，这通常是更好的做法。

记住，在 Git 中任何 *已提交* 的东西几乎总是可以恢复的。
甚至那些被删除的分支中的提交或使用 `--amend` 选项覆盖的提交也可以恢复
（阅读 <<ch10-git-internals#_data_recovery>> 了解数据恢复）。
然而，任何你未提交的东西丢失后很可能再也找不到了。
