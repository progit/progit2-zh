[[_git_tagging]]
=== 打标签

(((tags)))
像其他 VCS 一样，Git 有能力给历史中的某一个结点打上标签表示重要。
典型地人们会使用这个功能来标记发布结点（v1.0 等等）。
本节中，你将会学会如何列出可用的标签，如何创建新标签，以及不同类型的标签分别是什么。

==== 列出你的标签

在 Git 中列出可用的标签相当直接。
只需要输入 `git tag`：(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.3
----

这个命令以字母顺序列出标签；它们出现的顺序并不重要。

你可以使用特定的通配符来查找标签。
例如，Git 自身的源代码仓库，包含 500 个以上的标签。
假设你只对 1.8.5 系列感兴趣，你可以执行：

[source,console]
----
$ git tag -l 'v1.8.5*'
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

==== 创建标签

Git 使用两种主要类型的标签：轻量级的（lightweight）与含附注的（annotated）。

一个轻量级的标签与分支很像但并不会改变 - 它只是一个特定提交的引用。

含附注标签，然而，是存储在 Git 数据库中的一个完整对象。
它们是可以被校验的；其中包含标签名字、电子邮箱、日期时间；还有一个标签信息；并且可以使用 GNU Privacy Guard （GPG）签名与验证。
通常建议你创建含附注标签这样你可以拥有所有以上的信息；但是如何你因为某些原因不想要保存那些信息而想要使用临时标签，轻量级标签也是可用的。

[[_annotated_tags]]
==== 含附注的标签

(((tags, annotated)))
在 Git 中创建一个含附注的标签是很简单的。
最简单的方式是当你在执行 `tag` 命令时指定 `-a` 选项：(((git commands, tag)))

[source,console]
----
$ git tag -a v1.4 -m 'my version 1.4'
$ git tag
v0.1
v1.3
v1.4
----

`-m` 选项指定了一条标签信息，将会存储在标签中。
如果你并未为含附注标签指定一条信息，Git 会运行你的编辑器这样你就可以输入。

通过使用 `git show` 命令你可以看到标签信息与对应的提交信息：

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

那显示了打标签的人信息，打标签的日期时间，还有在提交信息前的附注信息。

==== 轻量级标签

(((tags, lightweight)))
另一种标记提交的方式是使用轻量级标签。
这是基本的方式因为校验信息存储在文件中 - 没有任何其他信息。
创建一个轻量级标签，不要使用 `-a`、`-s` 或 `-m` 选项：

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

这次，如果你在标签上执行 `git show`，你不会看到额外的标签信息。(((git commands, show)))
命令只会显示出提交：

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

==== 后期打标签

你可以对过去的提交打标签。
假设你过去的提交历史是这样的：

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

现在，假设你忘记在 v1.2 时给工程打标签，也就是在 ``updated rakefile'' 提交。
你可以在之后补上标签。
要在那个提交上打标签，你需要在命令的结尾处指定提交的校验值（或者部分校验值）:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

你可以看到你已经在那次提交上打上标签了：(((git commands, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[_sharing_tags]]
==== 共享标签

默认情况下，`git push` 命令并不会传送标签到服务器上。(((git commands, push)))
在你创建完标签后必须显示地推送标签到共享服务器上。
这个过程就像共享分支一样 - 你可以执行 `git push origin [tagname]`。

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

如果你有很多标签想要一次性推送，你也可以在 `git push` 命令中使用 `--tags` 选项。
这将会把你的所有不在远程服务器上的标签全部传送到远程服务器那儿。

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

现在，当其他人从你的仓库中克隆或拉取，他们也能得到所有你的标签。

==== 签出标签

在 Git 中你并不能真的签出一个标签，因为它们并不能来回移动。
如果你想要你的工作目录与在你仓库中特定的标签版本完全一样，你可以在特定的标签上创建一个新分支：

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

当然如果这样做之后又做了一次提交，因为你的分支由于你的改动向前移动了所以你的 `version2` 分支会与你的 `v2.0.0` 标签有略微的不同，这样做时要小心。
