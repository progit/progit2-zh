[[_remote_repos]]
=== 远程仓库的使用

为了能与任意一个 Git 工程协作，你需要知道如何管理你的远程仓库。
远程仓库是指托管在因特网或其他网络中的仓库。
你可以有好几个远程仓库，每一个可能是只读或读写都可以的。
与他人协作包括管理这些远程仓库与当你想共享工作时推送拉取数据。
管理远程仓库包括了解如何添加远程仓库，删除无效的仓库，管理不同的远程分支并定义它们是否为追踪的等等。
本节，我们将要讨论这其中的一些远程管理技能。

==== 查看你的远程服务器

想要查看你已经配置的远程服务器，你可以运行 `git remote` 命令。(((git commands, remote)))
它会列出你已经指定的所有远程服务器的缩写。
如果你已经克隆了你的仓库，你应该最少能看到 origin - 这是 Git 给你克隆仓库服务器的默认名字：

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

你也可以指定选项 `-v`，会显示当需要读写远程服务器时 Git 所保存的缩写对应的 URL。

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

如果你有不止一个远程服务器，这个命令会将它们全部列出。
例如，一个为了与几个协作者合作的拥有多个远程服务器的仓库会像下面这个样子：

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

这意味着我们可以很轻易地从其中的任意一个用户拉取贡献。我们也许还有额外的权限去推送到其中的一个或多个，虽然我们现在并不知道。

注意这些远程服务器使用不同的协议；我们将会在 <<_git_on_the_server>> 深入了解这些。

==== 添加远程仓库

我在之前的章节中已经提到并且给出了如何添加远程仓库的示例，但是这里要更清楚地讲解。(((git commands, remote)))
将一个新的远程 Git 仓库添加为你可以轻松引用的缩写，执行 `git remote add [shortname] [url]`：

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

现在你可以在命令行中使用 `pb` 在代替整个 URL。
例如，如果你想要拉取 Paul 有但你的仓库没有的信息，你可以运行 `git fetch pb`：

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

Paul 的 master 分支现在是作为 `pb/master` 在本地访问 - 你可以将其合并到你的某个分支中，或者你可以签出一个本地方支指向一个你想查看的点。
（我们将会在 <<_git_branching>> 中详细介绍分支是什么及如何使用分支。）

[[_fetching_and_pulling]]
==== 从你的远程仓库中获取与拉取

就如你刚才所见，从你的远程仓库中获得数据，你可以执行：(((git commands, fetch)))

[source,console]
----
$ git fetch [remote-name]
----

这个命令会访问远程仓库并拉取所有你没有的数据。
执行完成后，你将会扔有那个远程仓库中所有分支的引用，你可以随时合并或查看。

如果你克隆了一个仓库，克隆命令会自动将远程仓库添加为 ``origin''。
所以，`git fetch origin` 会获取在你克隆（或最后一次拉取）后所有推送的新工作。
重要的一点是 `git fetch` 命令会将数据拉取到你的本地仓库 - 它并不会与你的任何工作自动合并或修改你现在所在的内容。
当你准备好时你必须手动合并入你的工作。

如果你有一个分支设置为追踪一个远程分支（阅读下一节与 <<_git_branching>> 了解更多信息），你可以使用 `git pull` 命令来自动的获取然后合并远程分支到你当前分支。(((git commands, pull)))
这对你来说可能是一个更简单或舒服的工作方式；默认情况下，`git clone` 命令会自动设置你的本地 master 分支追踪你所克隆的远程仓库的 master 分支（或默认分支的名字）。
运行 `git pull` 通常会从你最初克隆的服务器上获取数据并自动尝试合并到你当前所在的分支。

[[_pushing_remotes]]
==== 推送到你的远程仓库

当你做了一些工作想要分享时，你必须推送到上游。
做这件事的命令很简单：`git push [remote-name] [branch-name]`。(((git commands, push)))
当你想要将你的 master 分支推送到你的 `origin` 服务器时（再次说明，克隆时通常会自动帮你设置好那两个名字），那么你运行这个命令就可以将你所做的备份到服务器：

[source,console]
----
$ git push origin master
----

这个命令只会在当你有写入权限访问你克隆的服务器并且没有人在同一时间推送过时有效。
当你和其他人在同一时间克隆然后他们先推送到上游然后你再推送到上游，你的推送就会被拒绝。
你必须先将他们的工作拉取下来并将其合并到你的工作中才能推送。
阅读 <<_git_branching>> 了解如何推送到远程服务器的详细信息。

[[_inspecting_remote]]
==== 查看远程仓库

如果你想要查看某一个远程仓库的更多信息，你可以使用 `git remote show [remote-name]` 命令。(((git commands, remote)))
如果你想以一个特定的缩写名运行这个命令，例如 `origin`，你会得到像下面类似的信息：

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

它同样会列出远程仓库的 URL 与追踪分支的信息。
这个命令帮助性地告诉你你现在在 master 分支与你运行 `git pull`，它会在获取所有远程引用后自动将远程 master 分支合并到本地 master 分支。
它也会列出它拉取的所有远程引用。

这是一个你很有可能会遇到的一个简单例子。
当你开始更多地使用 Git，无论如何，你将会从 `git remote show` 看到更多的信息。

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

这个命令列出了当你在特定的分支上执行 `git push` 会自动地推送到哪一个远程分支。
它也同样地列出了哪些远程分支不在你的本地，哪些分支你已经从服务器上移除了，还有当你执行 `git pull` 时哪些分支会自动合并。

==== 远程仓库的移除与改名

如果你想要修改引用的名字你可以执行 `git remote rename` 去修改一个远程仓库的缩写名。(((git commands, remote)))
例如，如果你想要将 `pb` 改为 `paul`，你可以用 `git remote rename` 这样做：

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

值得注意的是这样也会修改你的远程分支名字。
那些过去引用 `pb/master` 现在会引用 `paul/master`。

如果因为一些原因你想移除一个远程仓库 - 你已经从服务器上搬走了或不再想使用某一个特定的镜像了，又或者某一个贡献者不再贡献了 - 你可以使用 `git remote rm` ：

[source,console]
----
$ git remote rm paul
$ git remote
origin
----
