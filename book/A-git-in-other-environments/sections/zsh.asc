=== Zsh 中的 Git

(((zsh)))(((tab completion, zsh)))(((shell prompts, zsh)))
Git 还为 Zsh 提供了一个 Tab 补全库。
只需复制 `contrib/completion/git-completion.zsh` 到你的 home 目录，然后在 `.zshrc` 中进行引用即可。
Zsh 的接口相对于 Bash 而言更加强大：

[source,console]
----
$ git che<tab>
check-attr        -- 显示某个文件是否设置了某个属性
check-ref-format  -- 检查引用名称是否符合规范
checkout          -- 检出
checkout-index    -- 从暂存区拷贝文件至工作目录
cherry            -- 查找没有被合并至上游的提交
cherry-pick       -- 拣选
----

意义不明的 tab 补全没有被列出；他们拥有简洁的描述，你可以通过重复敲击 tab 键来切换列表中的导航项。
该功能可用于 Git 命令，以及他们的参数和在仓库中的内容的名称（例如 refs 和 remotes），以及文件名和其他所有 Zsh 知道如何去补全的项目。

Zsh 很好的兼容了 Bash ，并且提供了提示符自定义功能。不仅如此，它还允许你同时使用一个右侧提示符。
为了包含位于右侧的分支名称，添加以下行至你的 `~/.zshrc` 文件中：

[source,console]
----
setopt prompt_subst
. ~/git-prompt.sh
export RPROMPT=$'$(__git_ps1 "%s")'
----

该结果在命令行窗口的右边显示了当前分支，当你位于一个 Git 仓库目录中。它看起来有点像:

.自定义 `zsh` 提示符.
image::images/zsh-prompt.png[自定义 `zsh` 提示符.]

Zsh 足够强大，以至于有一些完整的框架专门为它打造，使它变得更强。
其中之一名为 "oh-my-zsh"，你可以在 https://github.com/robbyrussell/oh-my-zsh[] 中找到它。
oh-my-zsh 的扩展系统伴随着强大的 Git tab 补全功能，并且它有许多提示符 "主题"，其中的许多部分用来展示版本控制数据。
<<oh_my_zsh_git>> 只是可以通过这个系统实现的其中一个例子。

[[oh_my_zsh_git]]
.一个 oh-my-zsh 主题的示例.
image::images/zsh-oh-my.png[一个 oh-my-zsh 主题的示例.]
