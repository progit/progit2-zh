[[_refspec]]
=== 引用表达式（Refspec）

纵观全书，我们已经使用过一些诸如远程分支到本地引用的简单映射方式，但是还有更复杂的。
假设你添加了这样一个远程版本库：

[source,console]
----
$ git remote add origin https://github.com/schacon/simplegit-progit
----

上面的命令将在你的 `.git/config` 文件中添加一个小节，指定了远程版本库的名称（`origin`）、URL 地址、以及用于获取的引用表达式（Refspec）：

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/*
----

引用表达式的格式是由一个可选的 `+` 号和 `<src>:<dst>` 组成，这里 `<src>` 是远程上的引用格式， `<dst>` 是将要记录在本地的引用格式。可选的 `+` 号告诉 Git 即使不能快速演进，也要强制更新引用格式。

默认情况下引用表达式由 `git remote add` 命令自动生成， Git 获取服务器中 `refs/heads/` 下面的所有引用，并将它写入到本地的 `refs/remotes/origin/` 中。 所以，如果服务器上有一个 `master` 分支，即可在本地通过下面这种方式来访问分支记录：

[source,console]
----
$ git log origin/master
$ git log remotes/origin/master
$ git log refs/remotes/origin/master
----

上面的三个命令作用相同，因为 Git 把它们都扩展成 `refs/remotes/origin/master`。

如果想让 Git 每次只拉取远程的 `master` 分支，而不是所有分支，可以把 fetch 行修改为：

[source]
----
fetch = +refs/heads/master:refs/remotes/origin/master
----

这只是针对远程的 `git fetch` 操作的默认引用表达式。如果只想执行一次该操作，可以在命令行指定引用表达式。将远程的 `master` 分支拉取到本地的 `origin/mymaster` 分支，可以运行：

[source,console]
----
$ git fetch origin master:refs/remotes/origin/mymaster
----

你也可以指定多个引用表达式。使用命令行，你可以按照如下的方式拉取多个分支：

[source,console]
----
$ git fetch origin master:refs/remotes/origin/mymaster \
	 topic:refs/remotes/origin/topic
From git@github.com:schacon/simplegit
 ! [rejected]        master     -> origin/mymaster  (non fast forward)
 * [new branch]      topic      -> origin/topic
----

在这个例子中，`master` 分支的拉取操作被拒绝，因为该分支不是一个可以快速演进的引用。可以通过在引用表达式之前使用 `+` 号来强制更新。

你也可以在配置文件中指定多个引用表达式。如果想在每次获取时都包括 `master` 和 `experiment` 分支，添加如下两行：

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/master:refs/remotes/origin/master
	fetch = +refs/heads/experiment:refs/remotes/origin/experiment
----

注意这里不能使用部分通配符，所以下面这样就是不合法的：

[source]
----
fetch = +refs/heads/qa*:refs/remotes/origin/qa*
----

但可以使用命名空间（或目录）来达到这个目的。
如果你有一个 QA 团队，推送了一系列分支，而你只要获取 master 和 QA 团队的这些分支，那么，你可以使用如下的配置：

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/master:refs/remotes/origin/master
	fetch = +refs/heads/qa/*:refs/remotes/origin/qa/*
----

如果工作流很复杂，有 QA 团队推送的分支、开发人员推送的分支、还有集成团队推送并且在远程分支上协作，可以为他们创建各自的命名空间解决类似问题。

[[_pushing_refspecs]]
==== 推送引用表达式

采用命名空间的方式来获取分支是个好主意，但 QA 团队一开始如何将他们的分支推送到 `qa/` 命名空间呢？答案是通过引用表达式的推送来完成。
如果 QA 团队想把他们的 `master` 分支推送到远程服务器的 `qa/master` 分支上，可以运行：

[source,console]
----
$ git push origin master:refs/heads/qa/master
----

如果他们希望 Git 每次运行 `git push origin` 时都如上这样推送，他们可以在配置文件中添加一个 `push` 值：

[source,ini]
----
[remote "origin"]
	url = https://github.com/schacon/simplegit-progit
	fetch = +refs/heads/*:refs/remotes/origin/*
	push = refs/heads/master:refs/heads/qa/master
----

同样的，这会让 `git push origin` 默认把本地 `master` 分支推送到远程 `qa/master` 分支。

==== 删除引用

你也可以使用引用表达式来删除远程服务器的引用，运行如下命令：

[source,console]
----
$ git push origin :topic
----

因为引用表达式的格式是 `<src>:<dst>`, 所以把 `<src>` 留空的意思就是把远程的 `topic` 分支定义为空值，也就是删除它。
