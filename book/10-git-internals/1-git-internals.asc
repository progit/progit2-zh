[[_git_internals]]
== Git 内部原理

无论您是从之前的章节直接跳到本章，还是读完了其余章节一直到这——您都将在本章见识到 Git 的内部工作原理和实现方式。
我们发现学习这部分内容对于理解 Git 的用途和强大至关重要。不过也有人认为这些内容对于初学者而言可能难以理解且过于复杂。
因此我们把这部分内容放在最后一章，您在学习过程中可以先阅读这部分，也可以晚点阅读这部分，由您自己决定。

既然已经读到了这里，就让我们开始吧。
首先要弄明白一点，从根本上来讲 Git 是一个内容寻址（content-addressable）文件系统，并在此之上提供了一个版本控制系统的用户界面。
马上您就会学到这意味着什么。

早期的 Git（主要是1.5之前的版本）的用户界面要比现在复杂的多，因为它更侧重于作为一个文件系统，而不是一个打磨过的版本控制系统。
不过最近几年来，它已经被改进到不输于任何其他版本控制系统地清晰易用了，但是仍然会有人模式化的抱怨早期那个晦涩复杂的 Git 用户界面。

内容寻址文件系统层是一套相当酷的东西，所以在本章我会先讲解这部分内容。随后您会学到传输机制和仓库管理任务——您迟早会和它们打交道。

include::sections/plumbing-porcelain.asc[]

include::sections/objects.asc[]

include::sections/refs.asc[]

include::sections/packfiles.asc[]

include::sections/refspec.asc[]

include::sections/transfer-protocols.asc[]

include::sections/maintenance.asc[]

include::sections/environment.asc[]

=== 总结

现在，您应该相当了解 Git 在背后都做了些什么工作，并且在一定程度上也知道了 Git 是如何实现的。
本章讨论了很多底层（plumbing）命令，这些命令比您在本书其余部分学到的高级（porcelain）命令来得更原始，也更简洁。
从底层了解 Git 的工作原理有助于您更好的理解 Git 在内部是如何运作的，也方便您能够针对特定的工作流写出您自己的工具和脚本。

作为一套内容寻址文件系统，Git 不仅仅是一个版本控制系统，它同时是一个非常强大且易用的工具。
我们希望您可以借助新学到的 Git 内部原理相关知识来实现出你自己的应用，并且以更高级、更得心应手的方式来驾驭 Git。
