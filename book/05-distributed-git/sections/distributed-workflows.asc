=== 分布式工作流程

(((工作流程)))
与集中式的版本控制系统（CVCSs）不同，Git的天然分布式属性在项目协作开发上会给你带来更多的灵活性。在集中式系统中，每个开发者的角色就像是连接在集线器上的节点，彼此的工作方式大体相同。而在Git网络中，每个开发者同时扮演着这两个角色，也就是说，开发者既可以向别的库贡献代码，又可以维护一个公有库，其他人可以基于自己的工作开始，为此仓库贡献代码。将自己的代码贡献到另外一个开发者的仓库中，或者建立自己的公共仓库，让其他开发者基于自己的工作开始，为自己的仓库贡献代码。于是，Git 的分布式协作便可以衍生出种种不同的工作流程，我会在接下来的章节介绍几种常见的应用方式，并分别讨论各自的优缺点。你可以选择其中的一种，或者结合起来，应用到你自己的项目中。利用这种灵活性，你的工程或团队将会有利用多种工作流程的可能性，我们接下来将会介绍几种常见范式，并讨论每种设计的优劣，你可以选择使用其中之一，或者把它们结合起来使用。

==== 集中式工作流程

(((集中的工作流程)))
通常，集中式工作流程使用的都是单点协作模型。一个存放代码仓库的中心服务器，可以接受任何人同步他们的工作。开发者都是普通的节点，作为中心集线器的消费者，将他们的工作向服务器同步。
.Centralized workflow.
image::images/centralized.png[集中式工作流程]

这意味着如果两个开发者从中央仓库clone代码，同时做出改变，第一个开发者可以没问题地push他得修改。第二个开发者为了避免覆盖第一个开发者的工作，必须在push之前merge他的代码。在Git中这是对的，和在Subversion（或其他 CVCS）一样。
如果你已经习惯于公司或团队使用的集中式工作流程，你可以很轻松地在Git中继续使用这种工作流程。简单地启用一个单一的仓库，给予团队的每个人push的权限，Git不会让成员之间的代码相互覆盖。
假如John和Jessica同时开始工作，John修改完代码，push到服务器上，然后Jessica试图push她的代码，但是服务器拒绝了这次提交请求。提示说她试图push一个非前向改变，因此在拉取和合并代码前不允许push。
工作流对许多人来说很有吸引力，因为这是一个大部分人熟悉的范式。

这不止限于小的团队，利用Git的分支模型，成百上千个开发者通过十几个分支并发地开发同一个项目变为了可能。
[[_integration_manager]]
==== Integration-Manager Workflow
集中管理式工作流
(((workflows, integration manager)))
由于Git允许使用多个远程仓库，每个开发者可以对他们自己的公有仓库具有写权限，并对别人的仓库具有读权限。这种场景通常包含一个规范库，用来表示“官方”项目。为了向这个项目贡献代码，你需要通过clone这个项目来创造出自己的仓库，并push你的改变。然后，你可以向项目的维护者提交合并申请。维护者可以把你的仓库作为一个远端仓库，在本地测试你的修改，然后合并到他们的分支上，并推送到官方仓库中。
工作过程如下 (见 <<wfdiag_b>>):
1. 项目维护者push他们的公有库。
2. 项目贡献者clone此仓库并作修改。
3. 贡献者push到他们的公共拷贝上。
4. 贡献者给维护者发送邮件，请求pull自己的修改。
5. 维护者把贡献者的仓库加入远程仓库，并在本地合并。
6. 维护者把修改push到主仓库中。

[[wfdiag_b]]
.Integration-manager workflow.
image::images/integration-manager.png[Integration-manager workflow.]

(((forking)))
这种集中式的工作流在集线器式工具上非常常见，比如GitHub或GitLab。在这里人们非常容易地fork一个项目并把修改push到自己fork的版本中，每个人都可以看到这个改变。这么做最主要的优点在于，你可以继续工作，而不必等待维护者处理你提交的更新。而维护者也可以按照自己的节奏，任何时候都可以过来处理接纳你的贡献。

==== 司令官与副手工作流	

(((工作流，司令官和副手)))
这其实是上一种工作流的变体。这是一个多仓库工作流的变体，通常用在上百个协作者的大型项目中，一个著名的例子就是Linux内核。各个集成管理者负责仓库的特定部分，被称为副手。所有的副手有一位共同的总集成管理者，被称为司令官。司令官维护的仓库用于提供所有协作者拉取最新集成的项目代码。工作过程如下所示(see <<wfdiag_c>>):
1. 普通开发者在自己的分支上工作，并不定期地与master分支同步。
2. 副手将普通开发者的分支合并到自己的 master 分支中。
3. 司令官将所有副官的 master 分支并入自己的 master 分支。
4. 司令官将集成后的 master 分支推送到共享仓库中，以便所有其他开发者以此为基础进行同步。

[[wfdiag_c]]
.Benevolent dictator workflow.
image::images/benevolent-dictator.png[Benevolent dictator workflow.]

这种工作流程并不常用，但是在非常庞大的项目或者多级别的项目中非常有用。项目总负责人可以把大量分散的集成工作委托给不同的小组负责人分别处理，然后将处理结果收集起来。

==== 工作流总结
以上是几种常见的分布式系统可以应用的工作流程，比如Git，你会发现许多变体适合特定的真实世界工作流。我想现在你应该已经清楚，接下来自己需要用哪种方式开展工作了。我们将举更具体的例子来介绍组成不同工作流的角色如何完成工作。在下一节中，你会学到为一个项目贡献代码的几种常用模式。
