[[_branch_management]]
=== 分支管理

(((branches, managing)))
现在你已经创建、合并、删除了一些分支，让我们看看当你开始一直使用分支时手边的一些分支管理工具。

`git branch` 命令不只是可以创建与删除分支。(((git commands, branch)))
如果你不加任何参数运行它，你会得到当前你所有分支的一个列表：

[source,console]
----
$ git branch
  iss53
* master
  testing
----

注意`master` 分支前的 `*` 字符：它代表你现在签出了哪一个分支（也就是说，当前 `HEAD` 指针所指向的分支）
这意味着如果你在这时候提交，`master` 分支将会随着你的工作向前移动。
为了查看每一个分支的最后一次提交，你可以运行 `git branch -v` 命令：

[source,console]
----
$ git branch -v
  iss53   93b412c fix javascript issue
* master  7a98805 Merge branch 'iss53'
  testing 782fd34 add scott to the author list in the readmes
----

`--merged` 与 `--no-merged` 这两个有用的选项可以过滤出哪些分支合没合并到你当前所在的分支。
查看哪些分支已经合并到你当前所在的分支，你可以运行 `git branch --merged`：

[source,console]
----
$ git branch --merged
  iss53
* master
----

因为你之前已经合并了 `iss53` 分支，所以你现在看到它在你的列表中。
在列表中没有 `*` 号在分支名字前的分支通常可以使用 `git branch -d` 删除掉；你已经将他们的工作整合到了另一个分支，所以你并不会失去任何东西。

查看所有包含你的工作并且未合并的分支，你可以运行 `git branch --no-merged`：

[source,console]
----
$ git branch --no-merged
  testing
----

这里显示了你的其他分支。
因为它包含了还未合并入的工作，尝试使用 `git branch -d` 命令删除它时会失败：

[source,console]
----
$ git branch -d testing
error: The branch 'testing' is not fully merged.
If you are sure you want to delete it, run 'git branch -D testing'.
----

如果你真地想要删除分支并丢掉你所做的内容，你可以使用 `-D` 选项强制删除它，如同帮助信息里所指出的。
