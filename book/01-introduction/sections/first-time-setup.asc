[[_first_time]]
=== Git 的初次设置

现在系统上已经安装了 Git，你会想要定制自己的 Git 环境。
每台计算机上只需配置一次，程序升级时自会保留配置信息。
你可以随时通过运行命令来修改它们。

Git 自带的 `git config` 工具能帮助你获取或设置 Git 的配置变量，以此来控制 Git 的状态和行为。(((git commands, config)))
这些变量分别存储在三个不同的位置：

1. `/etc/gitconfig` 文件: 包含系统上每个用户及其仓库的通用配置。
  如果使用带有 `--system` 选项的 `git config` 时，它会从此文件读写配置变量。
2. `~/.gitconfig` 或 `~/.config/git/config` 文件：针对当前用户。
  可以传递 `--global` 选项让 Git 读写此文件。
3. 当前仓库的 Git 目录中的 `config` 文件（即 `.git/config`）：只针对该仓库。

每一级的配置都会覆盖上一级的配置，因此 `.git/config` 的配置变量会覆盖 `/etc/gitconfig` 中的配置变量。

在 Windows 系统中，Git 会查找 `$HOME` 目录下（一般情况下是 `C:\Users\$USER`）的 `.gitconfig` 文件。
Git 同样也会查找 `/etc/gitconfig` 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。

==== 用户信息

当安装完 Git 后，应该做的第一件事就是设置你的用户名称与邮件地址。
这很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改：

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

再次强调，如果使用了 `--global` 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用这些信息。
当你想针对特定项目使用不同的用户名称与邮件地址时，可以在该项目目录下运行不带 `--global` 选项的命令来配置。

很多 GUI 工具都会在第一次运行时帮助你配置这些信息。

==== 文本编辑器

现在用户信息已经设置完毕，你可以配置默认的文本编辑器了，当 Git 需要你输入信息时会调用它。
如果未配置，Git 会使用操作系统默认的文本编辑器，通常是 Vim。
如果你想使用不同的文本编辑器，例如 Emacs，可以这样做：

[source,console]
----
$ git config --global core.editor emacs
----

[WARNING]
====
Vim 和 Emacs 是 Linux 与 Mac 等基于 Unix 的系统上开发者经常使用的流行的文本编辑器。
如果你对这些编辑器都不是很了解，或者你使用的是 Windows 系统，那么可能需要搜索如何在 Git 中配置你最常用的编辑器。
如果你不设置编辑器并且不知道 Vim 或 Emacs 是什么，当它们运行起来后你可能会被弄得不知所措。
====

==== 检查配置信息

若你想要检查你的配置，可使用 `git config --list` 命令列出 Git 此时能获取到的所有配置：

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

你可能会看到重复的变量名，因为 Git 会从不同的文件中读取同一个配置（例如：`/etc/gitconfig` 与 `~/.gitconfig`）。
这种情况下，Git 会使用它找到的每一个变量的最后一个配置。

你可以通过输入 `git config <key>`：(((git commands, config))) 来检查 Git 的某一项配置：

[source,console]
----
$ git config user.name
John Doe
----
