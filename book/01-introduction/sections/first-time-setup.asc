[[_first_time]]
=== 初次运行 Git 前的配置

现在你已经在你的系统上安装了 Git，你可能想要做几件事来定制你的 Git 环境。
你在每一台计算机上只需要做这些事一次；它们会在升级时保留下来。
你可以在任何时候通过命令修改它们。

Git 自带一个 `git config` 的工具来帮助你设置决定 Git 外观和行为的配置变量。(((git commands, config)))
这些变量存储在三个不同的位置：

1. `/etc/gitconfig` 文件: 包含系统上每一个用户及他们仓库的通用配置。
  若使用 `git config` 时使用参数 `--system`，它会从此文件读写配置变量。
2. `~/.gitconfig` 或 `~/.config/git/config` 文件：特定的当前用户。
  你可以通过 `--global` 参数让 Git 读写此文件。
3. `config` 你当前正在使用的 Git 仓库目录中的文件（就是 `.git/config`）：特指一个单独的仓库。

每一个级别覆盖上一级的配置，所以 `.git/config` 的配置变量会覆盖 `/etc/gitconfig` 中的配置变量。

在 Windows 系统中，Git 会查找 `$HOME` 目录下（对大多数人而言是 `C:\Users\$USER`）的 `.gitconfig` 文件。
它同样也会寻找 `/etc/gitconfig` 文件，尽管它的路径是相对于当你运行安装文件时安装 Git 时所选择的 MSys 的根目录。

==== 用户信息

当你安装完 Git 要做的第一件事就是设置你的名字与邮箱地址。
这很重要是因为每一个 Git 的提交都会使用这个信息，并且它会在你开始时嵌入到提交里：

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

再次强调，如果你使用了 `--global` 参数那么只需要运行一次，因为无论你在那个系统上做任何事 Git 都会使用那个信息。
当你想针对某一个仓库使用不同的名字与邮箱地址时，你可以在那个仓库目录下运行没有 `--global` 参数的命令来配置。

很多 GUI 工具会在你第一次运行时帮助你配置这些。

==== 你的编辑器

当用户信息设置完毕时，你可以配置当 Git 需要你输入信息的默认文本编辑器。
如果未配置，Git 会使用你的系统默认的文本编辑器，通常是 Vim。
如果你想使用不同的文本编辑器，例如 Emacs，你可以这样做：

[source,console]
----
$ git config --global core.editor emacs
----

[WARNING]
====
Vim 和 Emacs 是 Linux 与 Mac 等类 Unix 系统下开发者经常使用的流行的文本编辑器。如果你对这些编辑器都不是很了解或者你使用的是 Windows 系统，那么你可能需要搜索如何在 Git 中配置你最爱的编辑器。
如果你不设置编辑器并且你不知道 Vim 或 Emacs 是什么，当他们运行时你可能会进入一个令人困惑的状态。
====

==== 检查你的配置

如果你想要检查你的配置，你可以使用 `git config --list` 命令来列出所有 Git 当时能找到的配置。

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

你可能看到很多重复项，因为 Git 从不同的文件中读取同一个配置（例如：`/etc/gitconfig` 与 `~/.gitconfig`）。
这种情况下，Git 会使用重复项中的最后一个配置。

你可以检查 Git 的某一项配置通过输入 `git config <key>`：(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----
