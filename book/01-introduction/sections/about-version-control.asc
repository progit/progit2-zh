=== 关于版本控制

(((version control)))
什么是“版本控制”？我为什么要关心它呢？
版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。
在本书所展示的例子中，我们一般对软件的源代码文件进行版本控制，但实际上，你可以对任何类型的文件进行版本控制。

如果你是一名图形或网页设计师，可能需要保存某一幅图片或页面布局文件的所有修订版本（你大概很想要这种功能），采用版本控制系统（VCS）是个明智的选择。
有了它，你就能将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时刻的状态。你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致问题出现的原因，又是谁在何时引入了某个问题等等。
就算你乱来一气，把整个项目中的文件改的改，删的删，只要你使用了版本控制系统，照样可以轻松恢复到原来的样子，
但额外增加的工作量却微乎其微。

==== 本地版本控制系统

(((version control,local)))
许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。
这么做唯一的好处就是简单，但是特别容易犯错。
有时候会混淆所在的工作目录，一不小心还会写入错误的文件或者覆盖预想之外的文件。

为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。

.本地版本控制.
image::images/local.png[本地版本控制图解]

其中最流行的一种叫做 RCS，现今许多计算机系统上都还看得到它的踪影。
甚至在流行的 Mac OS X 系统上安装了开发者工具包之后，也可以使用 `rcs` 命令。
它的工作原理是在硬盘上保存补丁集（补丁是指文件修订前后的变化）；通过应用所有的补丁，可以重新计算出各个版本的文件内容。

==== 集中化的版本控制系统

(((version control,centralized)))
接下来人们又遇到一个问题，如何让不同系统上的开发者协同工作？
于是，集中化的版本控制系统（Centralized Version Control Systems，简称 CVCS）应运而生。
这类系统，诸如 CVS、Subversion 以及 Perforce 等，都有一个单一的集中管理服务器，用于保存所有文件的修订版本。而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。(((CVS)))(((Subversion)))(((Perforce)))
多年以来，这已成为版本控制系统的标准做法。

.集中化的版本控制.
image::images/centralized.png[集中化的版本控制图解]

这种做法带来了许多好处，特别是相较于老式的本地 VCS 来说。
现在，每个人都可以在一定程度上看到项目中的其他人在做些什么，
而管理员也可以轻松掌控每个开发者的权限。管理一个 CVCS 要远比在各个客户端上维护本地数据库来得轻松容易。

事分两面，有好有坏。
这么做最明显的缺陷就是中央服务器的单点故障。
如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。
如果中心数据库所在的磁盘发生损坏，又没有做恰当的备份，毫无疑问你将会丢失所有的数据——包括项目的整个变更历史。剩下的只有人们在各自机器上保留的独立快照。
本地版本控制系统也存在类似的问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有更改记录的风险。

==== 分布式版本控制系统

(((version control,distributed)))
于是分布式版本控制系统（Distributed Version Control System，简称 DVCS）应运而生。
在这类系统中，像 Git、Mercurial、Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。
这样一来，假如任何一处协同工作服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。
因为每一次克隆操作，实际上都是对代码仓库的一次完整备份。

.分布式版本控制.
image::images/distributed.png[分布式版本控制图解]

更进一步，许多这类系统都可以和若干不同的远程代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。
你可以根据需要来设置不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的。
