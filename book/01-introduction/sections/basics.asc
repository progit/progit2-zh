=== Git 基础

那么，Git 大概是怎样的一个系统呢？
请注意，接下来的内容非常重要。如果你理解了 Git 的思想和基本工作原理，那么用起来就能知其所以然，游刃有余了。
在开始学习 Git 之前，请尽力忘掉你对其它版本管理系统的认识，如 Subversion 和 Perforce 等，这样能避免混淆。
尽管 Git 用起来和其它的版本控制系统非常相似，但它们在如何存储和对待各种信息上却有很大的差异，理解这些差异能帮助你避免使用中的困惑。(((Subversion)))(((Perforce)))

==== 直接记录快照而非差异比较

Git 和其它版本控制系统（例如 Subversion 及类似工具）的主要差别在于对待数据的方式。
从概念上来说，其它大部分系统都是以文件变更列表的形式存储信息的，
这类系统（CVS、Subversion、Perforce、Bazaar 等等）将它们存储的信息看作一组基本文件和每个文件随时间逐步累积的更改。

.存储每个文件与初始版本的差异.
image::images/deltas.png[存储每个文件与初始版本的差异。]

Git 并不按照以上方式对待或存储数据，
而更像是把数据看作一组小型文件系统的快照。
每当你用 Git 提交更新或保存项目状态时，它基本上都会创建一份当时全部文件的快照并保存一个指向该快照的引用。
为了效率，Git 不会重新存储未修改的文件，而是只保留一个指向它们的链接。
Git 更像是将数据视为一个*快照流*。

.存储项目随时间改变的快照.
image::images/snapshots.png[Git 存储项目随时间改变的快照。]

这是 Git 与其它几乎所有版本控制系统最重要的区别，
它让 Git 重新考虑了以前每一代版本控制系统延续下来的诸多方面。
Git 更像是一个小型的文件系统，它附带了许多以此为基础来构建的超强工具，而不只是一个简单的 VCS。
稍后我们在<<_git_branching>>讨论 Git 分支管理时，将探究以这种方式对待数据所能获得的益处。

==== 几乎所有的操作都在本地执行

Git 中的绝大多数操作都只需要访问本地的文件和资源，一般不需要来自网络上其它计算机的信息。
如果你用过 CVCS（集中式版本控制系统），那大概会对大部分操作都有网络延迟开销这点印象深刻，而你将会体验到 Git 如闪电侠附体般的超凡速度。
由于你在本地磁盘上就有项目的完整历史，因此大部分操作看起来都能瞬间完成。

举个例子，如果你要浏览项目历史，Git 无需先外连到服务器获取历史后再显示出来。它只要直接从本地数据库中读取，
你就能立刻看到项目历史。
如果你想查看当前版本与一个月前的版本之间引入的修改，Git 会查找到一个月前的文件做一次本地的差异计算，而不是由远程服务器处理或从远程服务器拉回旧版本文件再来本地处理。

这也就意味着当你离线或者没有 VPN 时，仍然可以进行几乎任何操作。
若你想在飞机或火车上做些工作，那么你依然能愉快地提交，直到有网络连接时再上传；
若你在回家后 VPN 客户端不正常，当然也能继续工作。
如果你使用其它系统，这会很难做到，甚至是不可能做到的。
比如用 Perforce 时，如果你没有连接到服务器，那几乎什么也干不了；用 Subversion 和 CVS 时，你虽然可以修改文件，但不能向数据库提交修改（因为你的本地数据库离线了）。
这看起来问题不大，不过你可能会惊喜地发现它所带来的巨大的不同。

==== Git 保证完整性

Git 中所有的数据在存储前都会计算校验和，然后以校验和来引用，
这意味着你不可能在 Git 不知情时更改任何文件或目录的内容。
此功能建立在 Git 底层，是构成 Git 哲学必不可少的部分。
传输过程中若有信息丢失或文件损坏，Git 立刻就能发现。

Git 用来计算校验和的机制叫做 SHA-1 哈希,(((SHA-1)))
它是由 40 个十六进制字符（0-9 和 a-f）组成的字符串，基于 Git 中文件的内容或目录结构计算得来。
SHA-1 哈希值看起来就像这样：

[source]
----
24b9da6552252987aa493b52f8696cd6d3b00373
----

Git 中使用这种哈希值的情况很多，你会经常看到它。
实际上，Git 数据库中存储的信息并不以文件名来索引，而是通过文件内容的哈希值来索引的。

==== Git 通常只添加数据

你执行的 Git 操作，几乎都只会往数据库中增加数据，
而且很难让它执行任何不可逆的操作，或者让它以任何方式清除数据。
在任何 VCS 中，未提交的更改都有可能会丢失或被弄乱；但是只要你将快照提交到 Git 中，就很难再丢失数据。如果你还有定期将数据库推送到其它仓库的习惯，那就更是如此了。

这让使用 Git 变得非常安心愉悦，因为我们深知自己可以尽情做各种尝试，而不会把事情搞砸。
有关 Git 如何存储数据及恢复丢失数据的深度探讨，请参阅<<_undoing>>一节。

==== 三种状态

现在请注意：
如果你希望后面的学习过程更加顺利，请记住以下关于 Git 的概念。
Git 有三种状态，你的文件可能处于其中之一，它们分别是：已提交（committed）、已修改（modified）和已暂存（staged）。
“已提交”表示数据已经安全地存储在本地数据库中。
“已修改”表示修改了文件，但还未保存到数据库中。
“已暂存”表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。

由此我们引入了 Git 项目中的三个部分：Git 仓库、工作目录以及暂存区域。

.工作目录、暂存区域以及 Git 仓库.
image::images/areas.png[工作目录、暂存区域以及 Git 仓库。]

Git 仓库目录是用来存储项目元数据和对象库的地方。
这是 Git 中最重要的部分，当你从其它计算机克隆仓库时，复制的就是这里的数据。

工作目录是对项目的某个版本单独提取出来的内容。
它们是从 Git 仓库的压缩数据库中拉取出来的文件，放在磁盘上供你使用或修改。

暂存区域是一个文件，用于保存下次将要提交的文件列表信息，一般在 Git 仓库目录中。
有时它也被称为“索引”，不过通常还是叫做暂存区域。

基本的 Git 工作流程如下：

1. 在工作目录中修改文件。
2. 暂存文件：将文件的快照加入暂存区域。
3. 提交更新：获取暂存区域的文件，将快照永久性存储到 Git 仓库目录。

若 Git 目录中保存着文件的特定版本，就是已提交状态。
若文件已修改且已加入暂存区域，就属于已暂存状态。
若自上次检出后，文件已修改但尚未加入暂存区域，则是已修改状态。
在<<_git_basics_chapter>>一章中，你会进一步了解这些状态的细节，学会如何根据文件状态进行后续操作，以及如何跳过暂存直接提交。
